// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  name      String
  password  String
  books     Book[]
  chapters  Chapter[]
  tags      Tag[]
  following Follow[]  @relation("leader")
  followers Follow[]  @relation("follow")
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Book {
  id          String    @id @default(cuid())
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  description String    @db.VarChar(200)
  title       String
  chapters    Chapter[]
  tags        Tag[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chapter {
  id            String    @id @default(cuid())
  title         String
  text          String
  chapterNumber Int
  book          Book      @relation(fields: [bookId], references: [id])
  bookId        String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  tags          Tag[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  label     String   @db.VarChar(50)
  value     String   @db.VarChar(50)
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Follow {
  leader   User   @relation("leader", fields: [leaderId], references: [id])
  leaderId String
  follow   User   @relation("follow", fields: [followId], references: [id])
  followId String

  @@id([leaderId, followId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

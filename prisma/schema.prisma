// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  username         String            @unique
  name             String
  password         String
  bio              String            @default("Hello, check out my stories!") @db.VarChar(400)
  avatarType       String            @default("croodles")
  avatarSeed       String            @default("scrivono")
  books            Book[]
  chapters         Chapter[]
  following        Follow[]          @relation("follow")
  followers        Follow[]          @relation("leader")
  comments         Comment[]
  bookReactions    BookReaction[]
  chapterReactions ChapterReaction[]
  ReadLater        ReadLater[]
  createdAt        DateTime          @default(now())
}

model Book {
  id          Int            @id @default(autoincrement())
  author      User           @relation(fields: [authorId], references: [id])
  authorId    Int
  description String         @db.VarChar(200)
  title       String
  chapters    Chapter[]
  comments    Comment[]
  reactions   BookReaction[]
  likes       Int            @default(0)
  dislikes    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Chapter {
  id            Int               @id @default(autoincrement())
  title         String
  text          String
  description   String            @default("") @db.VarChar(400)
  status        String            @default("published")
  chapterNumber Int               @default(-1)
  book          Book?             @relation(fields: [bookId], references: [id])
  bookId        Int?
  author        User              @relation(fields: [authorId], references: [id])
  authorId      Int
  tags          TagsOnChapters[]
  comments      Comment[]
  reactions     ChapterReaction[]
  ReadLater     ReadLater[]
  likes         Int               @default(0)
  dislikes      Int               @default(0)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

// model Tag {
//   id        String   @id @default(autoincrement())
//   label     String   @db.VarChar(50)
//   value     String   @db.VarChar(50)
//   book      Book?    @relation(fields: [bookId], references: [id])
//   bookId    String?
//   chapter   Chapter? @relation(fields: [chapterId], references: [id])
//   chapterId String?
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  String
//   createdAt DateTime @default(now())
// }

model Tag {
  id       Int              @id @default(autoincrement())
  label    String
  value    String
  chapters TagsOnChapters[]
}

model TagsOnChapters {
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int // relation scalar field (used in the `@relation` attribute above)
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int // relation scalar field (used in the `@relation` attribute above)

  @@id([chapterId, tagId])
}

model Follow {
  leader   User @relation("leader", fields: [leaderId], references: [id])
  leaderId Int
  follow   User @relation("follow", fields: [followId], references: [id])
  followId Int

  @@id([leaderId, followId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookReaction {
  author   User @relation(fields: [authorId], references: [id])
  authorId Int
  value    Int
  book     Book @relation(fields: [bookId], references: [id])
  bookId   Int

  @@id([authorId, bookId])
}

model ChapterReaction {
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
  value     Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int

  @@id([authorId, chapterId])
}

model ReadLater {
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
  createdAt DateTime @default(now())

  @@id([authorId, chapterId])
}
